add_annotations(
text = df$Synonym[i],
x = i,
y = df$kegg[i],
ax = ax,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_kegg
View(resultHMDB)
View(resultHMDB)
p_hmdb <- plot_ly(x = 1:length(plot.data[[1]]$Synonym),
y = plot.data[[1]]$hmdb,
type = "bar",
height = h,
width = w) %>%
layout(title = "HMDB metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Number of pathways metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultHMDB),"unique metabolites have pathways from HMDB"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[1]]
ay <- 40
if(i == 4){
ay <- -20
ax <- 40
}else if(i ==5){
ay <- -20
ax <- 80
} else{
ay <- 40
ax <- 40
}
p_hmdb <- p_hmdb %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$hmdb[i],
ax = 40,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_hmdb
p_hmdb <- plot_ly(x = 1:length(plot.data[[1]]$Synonym),
y = plot.data[[1]]$hmdb,
type = "bar",
height = h,
width = w) %>%
layout(title = "HMDB metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Number of pathways metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultHMDB),"unique metabolites have pathways from HMDB"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[1]]
ay <- 40
if(i == 4){
ay <- -20
ax <- 40
}else if(i ==5){
ay <- 20
ax <- 80
} else{
ay <- 40
ax <- 40
}
p_hmdb <- p_hmdb %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$hmdb[i],
ax = 40,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_hmdb
p_hmdb <- plot_ly(x = 1:length(plot.data[[1]]$Synonym),
y = plot.data[[1]]$hmdb,
type = "bar",
height = h,
width = w) %>%
layout(title = "HMDB metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Number of pathways metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultHMDB),"unique metabolites have pathways from HMDB"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[1]]
ay <- 40
if(i == 4){
ay <- -15
ax <- 40
}else if(i ==5){
ay <- 15
ax <- 80
} else{
ay <- 40
ax <- 40
}
p_hmdb <- p_hmdb %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$hmdb[i],
ax = 40,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_hmdb
View(resultHMDB)
nrow(resultHMDB[resultHMDB$hmdb != 0])
nrow(resultHMDB[where(resultHMDB$hmdb != 0]))
?where
nrow(resultHMDB[which(resultHMDB$hmdb != 0]))
?which
nrow(resultHMDB[which(resultHMDB$hmdb) != 0])
nrow(resultHMDB[which(resultHMDB$hmdb) == 0])
nrow(resultHMDB[resultHMDB$hmdb == 0,])
nrow(resultHMDB[resultHMDB$hmdb != 0,])
length(plot.data[[1]]$Synonym)
nrow(plot.hmdb)
View(plot.hmdb)
View(plot.data[[1]])
database <- c("hmdb",'kegg','wiki','reac')
for(i in 1:4){
rampId <- as.character(unique(plot.data[[i]]$metabolites))
rampId <- sapply(rampId,shQuote)
rampId <- paste(rampId,collapse = ",")
query <- paste("select * from analytesynonym where rampId in(",rampId,") group by rampId;")
synonymdf1 <- dbGetQuery(con,query)
plot.data[[i]] <- merge(plot.data[[i]],synonymdf1[,1:2],by.x = "metabolites",by.y="rampId",all.x = T)
}
View(plot.data[[1]])
plot.hmdb <- resultHMDB[order(resultHMDB$hmdb,decreasing = T) & resultHMDB$hmdb!=0,]
nrow(plot.hmdb)
plot.kegg <- resultKEGG[order(resultKEGG$kegg,decreasing = T) & resultKEGG$kegg!=0,]
plot.wiki <- resultWIKI[order(resultWIKI$wiki,decreasing = T) & resultWIKI$wiki!=0,]
plot.reac <- resultREAC[order(resultREAC$reac,decreasing = T) & resultREAC$reac!=0,]
plot.data <- list()
plot.data[[1]] <- plot.hmdb
plot.data[[2]] <- plot.kegg
plot.data[[3]] <- plot.wiki
plot.data[[4]] <- plot.reac
database <- c("hmdb",'kegg','wiki','reac')
for(i in 1:4){
rampId <- as.character(unique(plot.data[[i]]$metabolites))
rampId <- sapply(rampId,shQuote)
rampId <- paste(rampId,collapse = ",")
query <- paste("select * from analytesynonym where rampId in(",rampId,") group by rampId;")
synonymdf1 <- dbGetQuery(con,query)
plot.data[[i]] <- merge(plot.data[[i]],synonymdf1[,1:2],by.x = "metabolites",by.y="rampId",all.x = T)
}
for(i in 1:4){
plot.data[[i]] <- plot.data[[i]][order(plot.data[[i]][,i+2],decreasing = T),]
}
View(plot.data[[1]])
for(i in 1:4){
write.csv(plot.data[[i]],
file = paste0(database[i],"promiscuous.csv"),
row.names = F)
}
m <- list(
l = 100,
r = 100,
t = 100,
b = 100
)
h <- 1000
w <- 1000
length(plot.data[[1]]$Synonym)
p_hmdb <- plot_ly(x = 1:length(plot.data[[1]]$Synonym),
y = plot.data[[1]]$hmdb,
type = "bar",
height = h,
width = w) %>%
layout(title = "HMDB metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Number of pathways metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultHMDB),"unique metabolites have pathways from HMDB"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[1]]
ay <- 40
if(i == 4){
ay <- -15
ax <- 40
}else if(i ==5){
ay <- 15
ax <- 80
} else{
ay <- 40
ax <- 40
}
p_hmdb <- p_hmdb %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$hmdb[i],
ax = 40,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_hmdb
p_kegg <- plot_ly(x = 1:length(plot.data[[2]]$Synonym),
y = plot.data[[2]]$kegg,
type = "bar",
height = h,
width = w) %>%
layout(title = "KEGG metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Numbers of pathways metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultKEGG),"unique metabolites have pathways from KEGG"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[2]]
ax <- 20
ay <- 20
if(i == 2){
ax <- 20
ay <- -20
} else{
ax <- 20
ay <- 20
}
p_kegg <- p_kegg %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$kegg[i],
ax = ax,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_kegg
p_wiki <- plot_ly(x = 1:length(plot.data[[3]]$Synonym),
y = plot.data[[3]]$wiki,
type = "bar",
height = h,
width = w) %>%
layout(title = "Wikipathways metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Numbers of Wiki pathways that metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultWIKI),"unique metabolites have pathways from WP"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[3]]
ax <- 20
ay <- 20
if(i == 2 ) {
ax <- 20
ay <- -20
} else if (i == 3){
ax <- 20
ay <- 20
} else if (i == 4) {
ax <- 40
ay <- 50
} else if (i == 5) {
ax <- 60
ay <- 80
}
p_wiki <- p_wiki %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$wiki[i],
ax = ax,
ay = ay,
xanchor = "left",
yanchor = "bottom"
)
}
p_wiki
p_reac <- plot_ly(x = 1:length(plot.data[[4]]$reac),
y = plot.data[[4]]$reac,
type = "bar",
height = h,
width = w) %>%
layout(title = "Reactome metabolites vs. Pathways",
margin = m,
font = list(
size = 24
),
yaxis = list(
title = "Numbers of pathways metabolites are involved in",
font = list(
size = 24
)
),
xaxis = list(
title = paste("Total", nrow(resultREAC),"unique metabolites have pathways from Reactome"),
showticklabels = FALSE,
font = list(
size = 24
)
))
for(i in 1:5){
df <- plot.data[[4]]
p_reac <- p_reac %>%
add_annotations(
text = df$Synonym[i],
x = i,
y = df$reac[i],
ax = 20,
ay = 20,
xanchor = "left",
yanchor = "bottom"
)
}
p_reac
export(p_hmdb,"hmdbMetabolitesPathways.png")
export(p_kegg,"keggMetabolitesPathways.png")
export(p_wiki,"wikiMetabolitesPathways.png")
export(p_reac,"reacMetabolitesPathways.png")
shiny::runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
.rs.restartR()
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
if (interactive()) {
# basic example
shinyApp(
ui = fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
),
server = function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
)
# demoing optgroup support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = c("NY", "NJ", "CT"),
`West Coast` = c("WA", "OR", "CA"),
`Midwest` = c("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
}
runApp('~/RProject/BiometricsUI')
tab_overview <- tabItem(
tabName = "Overview",
shiny::fluidRow(
box(
width = 12,
title = 'Overview of database',
solidHeader = T,
collapsible = T,
column(
width = 2,
style = "margin:1px;",
div(
style = "paddling:0px;",
width = 12,
selectInput('selectTableToShow',label = 'Select table to show from the list:',
choices = list(
`Subject Information` = c('Subject Table'),
`Raw measurment` = c('Pressure fabric of floor','Pressure fabric of seat',
'Encoder'),
`Processed data` = c('Floor map','Seat map'),
`Symptom` = c('Tapping','Fidgeting'),
`Anxiety` = c('Anxiety level')
)),
actionButton("showSubjectTable",label = "Click to show table"),
sliderInput('showNumItems',label = 'Select number of items you want to show',
min = 1,max = 10000,value = 5),
textOutput('statsForTable')
)
),
column(
width = 9,
shinydashboard::box(
width = 12,
height = "100%",
div(
style = "margin:5px;",
width = 6,
DT::dataTableOutput("subjectTable")
)
)
)
)
),
fluidRow(
shinydashboard::box(
title = strong("Select x,y value for scatter plot"),
width = 12,
height = "100%",
selectInput("selectSubjectX",label = "Select your x value",
choices = NULL),
selectInput("selectSubjectY",label = "Select your y value",
choices = NULL),
actionButton('plotSubjectPlot',label = 'Click to plot',
icon = icon("fa fa-area-chart")),
plotly::plotlyOutput('subjectScatterPlot')
)
)
) # end of the Subject page
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
