}
result <- rampFastPathFromSource(sourceid = sourcedf2)
View(result)
#' Find all synonym from a given metabolite's name
#' @param full bool if return whole data.frame
#' @param find_synonym bool if find all synonyms or just return same synonym
#' as input (there are some common synonyms that will mess up whole searching)
#' @export
rampFindSynonymFromSynonym <- function(synonym,full = F,find_synonym = F){
if(is.character(synonym)){
if(grepl("\n",synonym)[1]){
list_metabolite <- strsplit(synonym,"\n")
list_metabolite <- unlist(list_metabolite)
} else if(grepl(",",synonym)[1]){
list_metabolite <- strsplit(synonym,",")
list_metabolite <- unlist(list_metabolite)
} else {
list_metabolite <- synonym
}
} else if(is.data.frame(synonym)){
list_metabolite <- unlist(synonym)
} else{
message("Wrong Format of argument")
return(NULL)
}
if(!find_synonym){
message("Dont Find synonym due to common synonyms (Triglyceride?).")
list_metabolite <- unique(list_metabolite)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query <- paste0("select synonym as origins,rampId from analyteSynonym where Synonym in(",
list_metabolite,
");")
df1 <- dbGetQuery(con,query)
return(df1)
}
list_metabolite <- unique(list_metabolite)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query <- paste0("select synonym as origins,rampId from analyteSynonym where Synonym in(",
list_metabolite,
");")
df1 <- dbGetQuery(con,query)
rampid <- df1$rampId
rampid <- sapply(rampid,shQuote)
rampid <- paste(rampid,collapse = ",")
query <- paste0("select * from analyteSynonym where rampId in(",rampid,");")
df2 <- dbGetQuery(con,query)
df2 <- merge(df1,df2)
if(full){
return(df2)
}
synonym <- df2$Synonym
print('Hello world')
synonym
}
#' Find all source from given list of RaMP Ids
#' @param rampId could be a data frame return by rampFindSynonymFromSynonym
#'  containing all information related to synonym. Or can be a list of
#'  rampId
#'  @param full return whole searching result or not.
#' @export
rampFindSourceFromId <- function(rampId=NULL,full = T){
if(is.data.frame(rampId)){
list_id <- rampId$rampId
} else if(is.character(rampId)){
if(grepl("\n",rampId)[1]){
list_id <- strsplit(rampId,"\n")
list_id <- unlist(list_id)
} else if(grepl(",",rampId)[1]){
list_id <- strsplit(rampId,",")
list_id <- unlist(list_id)
} else {
list_id <- rampId
}
} else{
message("Wrong format of input")
return(NULL)
}
list_id <- unique(list_id)
list_id <- sapply(list_id,shQuote)
list_id <- paste(list_id,collapse = ",")
query <- paste0("select * from source where rampId in (",list_id,");")
df <- dbGetQuery(con,query)
if(full){
return(df)
} else{
return(df[,1])
}
}
#' Fast search given a list of metabolites
#' @param sourceid a vector of synonym that need to be searched
#' @return a list contains all metabolits as name and pathway inside.
#'
#' Apply famil function...
#'
#' @export
rampFastPathFromSource<- function(sourceid,find_synonym = FALSE){
# progress<- shiny::Progress$new()
# progress$set(message = "Querying databases ...",value = 0)
now <- proc.time()
# con <- dbConnect(MySQL(), user = "root", password = "Ramp340!", dbname = "mathelabramp")
# on.exit(dbDisconnect(con))
# find synonym
#synonym <- rampFindSynonymFromSynonym(synonym,find_synonym=find_synonym)
list_metabolite <- unique(sourceid)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query1 <- paste0("select * from source where sourceid in (",
list_metabolite,");")
df1<- dbGetQuery(con,query1)
colnames(df1)[1] <-"sourceId2"
#return(df1)
rampid <- df1$rampId
rampid <- sapply(rampid,shQuote)
rampid <- paste(rampid,collapse = ",")
query2 <- paste0("select * from analytehaspathway where
rampId in (",rampid,");")
df2 <- dbGetQuery(con,query2)
#return(df2)
id_list <- unique(df2$pathwayRampId)
id_list <- sapply(id_list,shQuote)
id_list <- paste(id_list,collapse = ",")
print(id_list)
query3 <- paste0("select * from pathway where pathwayRampId in (",
id_list,");")
df3 <- dbGetQuery(con,query3)
#return(df3)
mdf <- merge(df3,df2,all.x=T)
mdf <- merge(mdf,df1,all.x = T)
mdf <- unique(mdf)
print("timing ...")
print(proc.time()- now)
return(mdf[,c(6,4,3,2)])
}
#' Find all synonym from a given metabolite's name
#' @param full bool if return whole data.frame
#' @param find_synonym bool if find all synonyms or just return same synonym
#' as input (there are some common synonyms that will mess up whole searching)
#' @export
rampFindSynonymFromSynonym <- function(synonym,full = F,find_synonym = F){
if(is.character(synonym)){
if(grepl("\n",synonym)[1]){
list_metabolite <- strsplit(synonym,"\n")
list_metabolite <- unlist(list_metabolite)
} else if(grepl(",",synonym)[1]){
list_metabolite <- strsplit(synonym,",")
list_metabolite <- unlist(list_metabolite)
} else {
list_metabolite <- synonym
}
} else if(is.data.frame(synonym)){
list_metabolite <- unlist(synonym)
} else{
message("Wrong Format of argument")
return(NULL)
}
if(!find_synonym){
message("Dont Find synonym due to common synonyms (Triglyceride?).")
list_metabolite <- unique(list_metabolite)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query <- paste0("select synonym as origins,rampId from analyteSynonym where Synonym in(",
list_metabolite,
");")
df1 <- dbGetQuery(con,query)
return(df1)
}
list_metabolite <- unique(list_metabolite)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query <- paste0("select synonym as origins,rampId from analyteSynonym where Synonym in(",
list_metabolite,
");")
df1 <- dbGetQuery(con,query)
rampid <- df1$rampId
rampid <- sapply(rampid,shQuote)
rampid <- paste(rampid,collapse = ",")
query <- paste0("select * from analyteSynonym where rampId in(",rampid,");")
df2 <- dbGetQuery(con,query)
df2 <- merge(df1,df2)
if(full){
return(df2)
}
synonym <- df2$Synonym
print('Hello world')
synonym
}
#' Find all source from given list of RaMP Ids
#' @param rampId could be a data frame return by rampFindSynonymFromSynonym
#'  containing all information related to synonym. Or can be a list of
#'  rampId
#'  @param full return whole searching result or not.
#' @export
rampFindSourceFromId <- function(rampId=NULL,full = T){
if(is.data.frame(rampId)){
list_id <- rampId$rampId
} else if(is.character(rampId)){
if(grepl("\n",rampId)[1]){
list_id <- strsplit(rampId,"\n")
list_id <- unlist(list_id)
} else if(grepl(",",rampId)[1]){
list_id <- strsplit(rampId,",")
list_id <- unlist(list_id)
} else {
list_id <- rampId
}
} else{
message("Wrong format of input")
return(NULL)
}
list_id <- unique(list_id)
list_id <- sapply(list_id,shQuote)
list_id <- paste(list_id,collapse = ",")
query <- paste0("select * from source where rampId in (",list_id,");")
df <- dbGetQuery(con,query)
if(full){
return(df)
} else{
return(df[,1])
}
}
#' Fast search given a list of metabolites
#' @param sourceid a vector of synonym that need to be searched
#' @return a list contains all metabolits as name and pathway inside.
#'
#' Apply famil function...
#'
#' @export
rampFastPathFromSource<- function(sourceid,find_synonym = FALSE){
# progress<- shiny::Progress$new()
# progress$set(message = "Querying databases ...",value = 0)
now <- proc.time()
# con <- dbConnect(MySQL(), user = "root", password = "Ramp340!", dbname = "mathelabramp")
# on.exit(dbDisconnect(con))
# find synonym
#synonym <- rampFindSynonymFromSynonym(synonym,find_synonym=find_synonym)
list_metabolite <- unique(sourceid)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query1 <- paste0("select * from source where sourceid in (",
list_metabolite,");")
df1<- dbGetQuery(con,query1)
colnames(df1)[1] <-"sourceId2"
#return(df1)
rampid <- df1$rampId
rampid <- sapply(rampid,shQuote)
rampid <- paste(rampid,collapse = ",")
query2 <- paste0("select * from analytehaspathway where
rampId in (",rampid,");")
df2 <- dbGetQuery(con,query2)
#return(df2)
id_list <- unique(df2$pathwayRampId)
id_list <- sapply(id_list,shQuote)
id_list <- paste(id_list,collapse = ",")
print(id_list)
query3 <- paste0("select * from pathway where pathwayRampId in (",
id_list,");")
df3 <- dbGetQuery(con,query3)
#return(df3)
mdf <- merge(df3,df2,all.x=T)
mdf <- merge(mdf,df1,all.x = T)
mdf <- unique(mdf)
print("timing ...")
print(proc.time()- now)
return(mdf[,c(6,4,3,7)])
}
result <- rampFastPathFromSource(sourceid = sourcedf2)
View(result)
#' Find all synonym from a given metabolite's name
#' @param full bool if return whole data.frame
#' @param find_synonym bool if find all synonyms or just return same synonym
#' as input (there are some common synonyms that will mess up whole searching)
#' @export
rampFindSynonymFromSynonym <- function(synonym,full = F,find_synonym = F){
if(is.character(synonym)){
if(grepl("\n",synonym)[1]){
list_metabolite <- strsplit(synonym,"\n")
list_metabolite <- unlist(list_metabolite)
} else if(grepl(",",synonym)[1]){
list_metabolite <- strsplit(synonym,",")
list_metabolite <- unlist(list_metabolite)
} else {
list_metabolite <- synonym
}
} else if(is.data.frame(synonym)){
list_metabolite <- unlist(synonym)
} else{
message("Wrong Format of argument")
return(NULL)
}
if(!find_synonym){
message("Dont Find synonym due to common synonyms (Triglyceride?).")
list_metabolite <- unique(list_metabolite)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query <- paste0("select synonym as origins,rampId from analyteSynonym where Synonym in(",
list_metabolite,
");")
df1 <- dbGetQuery(con,query)
return(df1)
}
list_metabolite <- unique(list_metabolite)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query <- paste0("select synonym as origins,rampId from analyteSynonym where Synonym in(",
list_metabolite,
");")
df1 <- dbGetQuery(con,query)
rampid <- df1$rampId
rampid <- sapply(rampid,shQuote)
rampid <- paste(rampid,collapse = ",")
query <- paste0("select * from analyteSynonym where rampId in(",rampid,");")
df2 <- dbGetQuery(con,query)
df2 <- merge(df1,df2)
if(full){
return(df2)
}
synonym <- df2$Synonym
print('Hello world')
synonym
}
#' Find all source from given list of RaMP Ids
#' @param rampId could be a data frame return by rampFindSynonymFromSynonym
#'  containing all information related to synonym. Or can be a list of
#'  rampId
#'  @param full return whole searching result or not.
#' @export
rampFindSourceFromId <- function(rampId=NULL,full = T){
if(is.data.frame(rampId)){
list_id <- rampId$rampId
} else if(is.character(rampId)){
if(grepl("\n",rampId)[1]){
list_id <- strsplit(rampId,"\n")
list_id <- unlist(list_id)
} else if(grepl(",",rampId)[1]){
list_id <- strsplit(rampId,",")
list_id <- unlist(list_id)
} else {
list_id <- rampId
}
} else{
message("Wrong format of input")
return(NULL)
}
list_id <- unique(list_id)
list_id <- sapply(list_id,shQuote)
list_id <- paste(list_id,collapse = ",")
query <- paste0("select * from source where rampId in (",list_id,");")
df <- dbGetQuery(con,query)
if(full){
return(df)
} else{
return(df[,1])
}
}
#' Fast search given a list of metabolites
#' @param sourceid a vector of synonym that need to be searched
#' @return a list contains all metabolits as name and pathway inside.
#'
#' Apply famil function...
#'
#' @export
rampFastPathFromSource<- function(sourceid,find_synonym = FALSE){
# progress<- shiny::Progress$new()
# progress$set(message = "Querying databases ...",value = 0)
now <- proc.time()
# con <- dbConnect(MySQL(), user = "root", password = "Ramp340!", dbname = "mathelabramp")
# on.exit(dbDisconnect(con))
# find synonym
#synonym <- rampFindSynonymFromSynonym(synonym,find_synonym=find_synonym)
list_metabolite <- unique(sourceid)
list_metabolite <- sapply(list_metabolite,shQuote)
list_metabolite <- paste(list_metabolite,collapse = ",")
query1 <- paste0("select * from source where sourceid in (",
list_metabolite,");")
df1<- dbGetQuery(con,query1)
colnames(df1)[1] <-"sourceId2"
#return(df1)
rampid <- df1$rampId
rampid <- sapply(rampid,shQuote)
rampid <- paste(rampid,collapse = ",")
query2 <- paste0("select * from analytehaspathway where
rampId in (",rampid,");")
df2 <- dbGetQuery(con,query2)
#return(df2)
id_list <- unique(df2$pathwayRampId)
id_list <- sapply(id_list,shQuote)
id_list <- paste(id_list,collapse = ",")
print(id_list)
query3 <- paste0("select * from pathway where pathwayRampId in (",
id_list,");")
df3 <- dbGetQuery(con,query3)
#return(df3)
mdf <- merge(df3,df2,all.x=T)
mdf <- merge(mdf,df1,all.x = T)
mdf <- unique(mdf)
print("timing ...")
print(proc.time()- now)
return(unique(mdf[,c(6,4,3,7)]))
}
result <- rampFastPathFromSource(sourceid = sourcedf2)
View(result)
length(unique(result$pathwayName))
length(unique(result$sourceId2))
write.xlsx(result,"outputFromHMDBid.xlsx",sheetName = "sheet1",row.names = F)
setwd("~/RProject/matheLab")
library(xlsx)
library(RMySQL)
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
hmdb<- list()
hmdb[[1]] <- read.xlsx('Compiled_results.xlsx',
sheetIndex = 1)
hmdb[[2]] <- read.xlsx('Compiled_results.xlsx',
sheetIndex = 2)
hmdb[[3]] <- read.xlsx('Compiled_results.xlsx',
sheetIndex = 3)
hmdb[[4]] <- read.xlsx('Compiled_results.xlsx',
sheetIndex = 4)
hmdb[[5]] <- read.xlsx('Compiled_results.xlsx',
sheetIndex = 5)
hmdb[[1]]
for(i in 1:length(hmdb)){
df <- hmdb[[i]]
df$HMDB.ID <- apply(df$HMDB.ID,gsub,pattern = "HMDB",
replacement = "HMDB00")
}
df$HMDB.ID <- apply(df$HMDB.ID,2,gsub,pattern = "HMDB",
replacement = "HMDB00")
for(i in 1:length(hmdb)){
df <- hmdb[[i]]
df$HMDB.ID <- apply(df$HMDB.ID,2,gsub,pattern = "HMDB",
replacement = "HMDB00")
}
for(i in 1:length(hmdb)){
df <- hmdb[[i]]
df$HMDB.ID <- sapply(df$HMDB.ID,gsub,pattern = "HMDB",
replacement = "HMDB00")
}
hmdb[[1]]
colnames(hmdb[[1]])
for(i in 1:length(hmdb)){
df <- hmdb[[i]]
df$HMDB.ID <- sapply(df$HMDB.ID,gsub,pattern = "HMDB",
replacement = "HMDB00")
hmdb[[i]] <- df
}
hmdb[[1]]
result<- list()
result[[1]] <- rampFindPathway(hmdb[[1]])
result[[2]] <- rampFindPathway(hmdb[[2]])
rampFindPathway<- function(hmdb){
hmdbid1 <- unique(as.character(hmdb$HMDB.ID[hmdb$HMDB.ID != "Not Found"]))
hmdbid1 <- sapply(hmdbid1,shQuote)
hmdbid1 <- paste(hmdbid1,collapse = ',')
query <- paste0("select * from source where sourceId in (",hmdbid1,");")
source <- dbGetQuery(con,query)
rampId <- unique(source$rampId)
#return(rampId)
rampId <- sapply(rampId,shQuote)
rampId <- paste(rampId,collapse = ',')
query2 <- paste0("select * from analytehaspathway where rampId in (",rampId,");")
pathway <- dbGetQuery(con,query2)
#return(pathway)
pid <- unique(pathway$pathwayRampId)
pid <- sapply(pid,shQuote)
pid <- paste(pid,collapse = ',')
query3 <- paste("select * from pathway where pathwayrampId in (",pid,");")
pname <- dbGetQuery(con,query3)
result <- merge(pname,pathway)
result2 <- merge(result,source,by.x = 'rampId',by.y = 'rampId')
result2 <- result2[,c(6,4,3,7)]
}
result[[1]] <- rampFindPathway(hmdb[[1]])
result[[2]] <- rampFindPathway(hmdb[[2]])
result[[3]] <- rampFindPathway(hmdb[[3]])
result[[4]] <- rampFindPathway(hmdb[[4]])
result[[5]] <- rampFindPathway(hmdb[[5]])
wb <- createWorkbook()
sheetName <- c("Treated_DMEM","Untreated_DMEM","Untreated_STDP","Full")
i<- 1
for(name in sheetName){
sheet[[name]] <-createSheet(wb,name)
}
for(i in 1:4){
addDataFrame(result[[i]],sheet = sheet[[i]],startColumn = 1,row.names = F)
}
sheet <- list()
for(name in sheetName){
sheet[[name]] <-createSheet(wb,name)
}
wb <- createWorkbook()
sheetName <- c("Treated_DMEM","Untreated_DMEM","Untreated_STDP","Full")
i<- 1
sheet <- list()
for(name in sheetName){
sheet[[name]] <-createSheet(wb,name)
}
for(i in 1:4){
addDataFrame(result[[i]],sheet = sheet[[i]],startColumn = 1,row.names = F)
}
saveWorkbook(wb,"pathways.xlsx")
write.xlsx(result[[1]],file = "dataFromAndy/pathways1.xlsx",sheetName = 'Treated_DMEM',row.names = F)
write.xlsx(result[[2]],file = "dataFromAndy/pathways2.xlsx",sheetName = 'Treated_STDP',row.names = F)
write.xlsx(result[[3]],file = "dataFromAndy/pathways3.xlsx",sheetName = 'Untreated_DMEM',row.names = F)
write.xlsx(result[[4]],file = "dataFromAndy/pathways4.xlsx",sheetName = 'Untreated_STDP',row.names = F)
write.xlsx(result[[5]],file = "dataFromAndy/pathways5.xlsx",sheetName = 'Full',row.names = F)
View(hmdb[[1]])
