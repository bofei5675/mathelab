colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(plot.heatmap)
}
df <- getHeatmapData()
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where seat_map_id >=',current,";")
df <- pool::dbGetQuery(con,sql)
df <- df[c('x','y','pressure')]
return(df)
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(plot.heatmap)
}
df <- getHeatmapData()
View(df)
dbWriteTable(con,value = pressure,name = 'cart_pressures_seat',append = T)
rownames(press)
rownames(pressure)
dbWriteTable(con,value = pressure,name = 'cart_pressures_seat',
append = T,row.names = FALSE)
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where seat_map_id >=',current,";")
df <- pool::dbGetQuery(con,sql)
df <- df[c('x','y','pressure')]
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(plot.heatmap)
}
df <- getHeatmapData()
dbWriteTable(con,value = pressure,name = 'cart_pressures_seat',
append = T,row.names = FALSE)
View(pressure)
View(pressure)
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
con <<- pool::dbPool(RMySQL::MySQL(),
dbname = 'biometrics',
username = 'root',
password = 'Ehe131224',
host = 'localhost')
df <- getHeatmapData()
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$seat_map_id)
df <- df[c('x','y','pressure')]
return(df)
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData()
View(df)
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
View(df)
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$seat_map_id)
df <- df[c('x','y','pressure')]
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
return(plot.data)
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData()
View(df)
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$seat_map_id)
df <- df[c('x','y','pressure')]
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
colnames(plot.data) < - c('x','y','pressure')
plot.heatmap <- merge(plot.data,df,
by.x = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData()
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$seat_map_id)
df <- df[c('x','y','pressure')]
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
colnames(plot.data) <- c('x','y','pressure')
plot.heatmap <- merge(plot.data,df,
by.x = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData()
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$seat_map_id)
df <- df[c('x','y','pressure')]
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
colnames(plot.data) <- c('x','y','pressure')
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData()
View(df[[1]])
View(df[[2]])
df[[2]]
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
View(pressure)
pressure2 <- pressure[-1000:,]
pressure2 <- pressure[-1000:-1,]
pressure2 <- pressure[nrow(pressure) - 1000:norw(pressure),]
pressure2 <- pressure[nrow(pressure) - 1000:nrow(pressure),]
View(pressure2)
pressure2 <- pressure[(nrow(pressure) - 1000):nrow(pressure),]
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
View(plot.data)
df <- getHeatmapData()
con <<- pool::dbPool(RMySQL::MySQL(),
dbname = 'biometrics',
username = 'root',
password = 'Ehe131224',
host = 'localhost')
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
View(plot.data)
View(df[[1]])
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
df <- getHeatmapData()
con <<- pool::dbPool(RMySQL::MySQL(),
dbname = 'biometrics',
username = 'root',
password = 'Ehe131224',
host = 'localhost')
df <- getHeatmapData()
View(df[[1]])
df <- getHeatmapData(9950)
View(df[[1]])
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
current <- 0
while(TRUE){
Sys.sleep(5)
df<- getHeatmapData(current)[1]
current <- getHeatmapData(current)[2]
print(df)
}
con <<- pool::dbPool(RMySQL::MySQL(),
dbname = 'biometrics',
username = 'root',
password = 'Ehe131224',
host = 'localhost')
current <- 0
while(TRUE){
Sys.sleep(5)
df<- getHeatmapData(current)[1]
current <- getHeatmapData(current)[2]
print(df)
}
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
df <- getHeatmapData(24482)
con <<- pool::dbPool(RMySQL::MySQL(),
dbname = 'biometrics',
username = 'root',
password = 'Ehe131224',
host = 'localhost')
df <- getHeatmapData(24482)
View(df[[1]])
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
df <- getHeatmapData(26483)
con <<- pool::dbPool(RMySQL::MySQL(),
dbname = 'biometrics',
username = 'root',
password = 'Ehe131224',
host = 'localhost')
df <- getHeatmapData(26483)
View(df[[1]])
df <- getHeatmapData(26413)
View(df[[1]])
df <- getHeatmapData(26013)
View(df[[1]])
df <- getHeatmapData(26013)
View(df[[1]])
df <- getHeatmapData(26413)
View(df[[1]])
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$id)
df <- df[c('x','y','pressure')]
if(nrow(df) > 1000){
df <- df[(nrow(df) - 999):nrow(df),]
} else if (nrow(df) <= 1){
return(list('Waiting',current))
}
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
return(df)
x <- seq(0,9)
y <- seq(0,9)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
colnames(plot.data) <- c('x','y','pressure')
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
plot.heatmap[is.na(plot.heatmap$pressure.y),] <- 0
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData(26413)
View(df[[1]])
df <- getHeatmapData(26413)
View(df[[1]])
df <- getHeatmapData(26410)
View(df[[1]])
df <- getHeatmapData(26000)
View(df[[1]])
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$id)
df <- df[c('x','y','pressure')]
if(nrow(df) > 1000){
df <- df[(nrow(df) - 999):nrow(df),]
} else if (nrow(df) <= 1){
return(list('Waiting',current))
}
return(df)
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
return(df)
x <- seq(0,9)
y <- seq(0,9)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
colnames(plot.data) <- c('x','y','pressure')
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
plot.heatmap[is.na(plot.heatmap$pressure.y),] <- 0
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData(26000)
View(df[[1]])
View(df)
con <<- pool::dbPool(RMySQL::MySQL(),
dbname = 'biometrics',
username = 'root',
password = 'Ehe131224',
host = 'localhost')
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$id)
df <- df[c('x','y','pressure')]
if(nrow(df) > 1000){
df <- df[(nrow(df) - 999):nrow(df),]
} else if (nrow(df) <= 1){
return(list('Waiting',current))
}
return(df)
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
return(df)
x <- seq(0,9)
y <- seq(0,9)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
colnames(plot.data) <- c('x','y','pressure')
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
plot.heatmap[is.na(plot.heatmap$pressure.y),] <- 0
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData(26000)
View(df)
df <- getHeatmapData(26484)
df <- getHeatmapData(26480)
View(df)
getHeatmapData <- function(current = 0){
sql <- paste0('select * from cart_pressures_seat where id >=',current,";")
df <- pool::dbGetQuery(con,sql)
current <- max(df$id)
df <- df[c('x','y','pressure')]
if(nrow(df) > 1000){
df <- df[(nrow(df) - 999):nrow(df),]
} else if (nrow(df) <= 1){
return(list('Waiting',current))
}
df <- aggregate(df$pressure,
by = list(df$x,df$y),
FUN = mean)
colnames(df) <- c('x','y','pressure')
return(df)
x <- seq(0,9)
y <- seq(0,9)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
colnames(plot.data) <- c('x','y','pressure')
plot.heatmap <- merge(plot.data,df,
by = c('x','y'),
all.x = T)
plot.heatmap <- plot.heatmap[c('x','y','pressure.y')]
plot.heatmap[is.na(plot.heatmap$pressure.y),] <- 0
colnames(plot.heatmap) <- c('x','y','pressure')
return(list(plot.heatmap,current))
}
df <- getHeatmapData(26480)
View(df)
x <- seq(0,10)
y <- seq(0,10)
plot.data <- expand.grid(x,y)
plot.data$pressure <- 0
View(plot.data)
mdf <- merge(plot.data,df,by = c('x','y'),all.x = T)
View(plot.data)
View(df)
colnames(plot.data) <- c('x','y','pressure')
mdf <- merge(plot.data,df,by = c('x','y'),all.x = T)
View(mdf)
mdf <- mdf[c('x','y','pressure.y')]
mdf[which(mdf$pressure.y) == NA] <- 0
mdf[which(mdf$pressure.y == NA)] <- 0
View(mdf)
mdf[which(mdf$pressure.y == NA),'pressure'] <- 0
View(mdf)
mdf <- merge(plot.data,df,by = c('x','y'),all.x = T)
mdf <- mdf[c('x','y','pressure.y')]
mdf[which(mdf$pressure.y == NA),'pressure.y'] <- 0
View(mdf)
mdf[mdf$pressure.y == NA,'pressure.y'] <- 0
mdf[is.na(mdf$pressure.y) ,'pressure.y'] <- 0
mdf$pressure.y[is.na(mdf$pressure.y)] <- 0
View(plot.data)
View(mdf)
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
runApp('~/RProject/BiometricsUI')
library(RMySQL)
source("helper.R")
setwd("~/RProject/matheLab/paperHeatMap")
library(RMySQL)
source("helper.R")
setwd("~/RProject/matheLab/paperHeatMap")
dbDisconnect(con)
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
source("helper.R")
library(RMySQL)
library(RMySQL)
.rs.restartR()
ls()
rm(list = ls())
library(RMySQL)
source("helper.R")
setwd("~/RProject/matheLab/paperHeatMap")
dbDisconnect(con)
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
pathways<- dbGetQuery(con,'select * from pathway;')
View(pathways)
source <- dbGetQuery(con,'select * from source;')
View(source)
dbname <- unique(pathways$type)
pathwayInKegg <- pathways[pathways$type == 'kegg',]
pathwayInWiki <- pathways[pathways$type == 'wiki',]
pathwayInReac <- pathways[pathways$type == 'reactome',]
min_analyte <- 5
listOfKeggC <- findAnalyteHasPathway(pathwayInKegg$pathwayRampId,n = min_analyte)
listOfWikiC <- findAnalyteHasPathway(pathwayInWiki$pathwayRampId,n = min_analyte)
listOfReacC <- findAnalyteHasPathway(pathwayInReac$pathwayRampId,n = min_analyte)
listOfKeggG <- findAnalyteHasPathway(pathwayInKegg$pathwayRampId,GC="G",n = min_analyte)
listOfWikiG <- findAnalyteHasPathway(pathwayInWiki$pathwayRampId,GC="G",n = min_analyte)
listOfReacG <- findAnalyteHasPathway(pathwayInReac$pathwayRampId,GC="G",n = min_analyte)
pathwayid <- c(#names(listOfHmdbC),
names(listOfKeggC),
names(listOfWikiC),
names(listOfReacC))
pathToanalC <- do.call(c,list(#listOfHmdbC,
listOfKeggC,
listOfWikiC,
listOfReacC))
metabolite_result <- compute_overlap_matrix(pathwayid = pathwayid,
pathwaysWithAnalytes =  pathToanalC,
methods = 'balanced')
