overlap = length(intersect(cid1,cid2)))
hmdbTohmdb <- rbind(hmdbTohmdb,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbTohmdb <- rbind(hmdbTohmdb,df)
}
}
}
View(hmdbTohmdb)
hmdbTohmdb <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2)))
hmdbTohmdb <- rbind(hmdbTohmdb,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbTohmdb <- rbind(hmdbTohmdb,df)
}
}
}
hmdbTohmdb <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbTohmdb <- rbind(hmdbTohmdb,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbTohmdb <- rbind(hmdbTohmdb,df)
}
}
}
hmdbToOther <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfKegg)){
cid2 <- grep('RAMP_C',listOfKegg[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfWiki)){
cid2 <- grep('RAMP_C',listOfWiki[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfReac)){
cid2 <- grep('RAMP_C',listOfReac[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
}
View(hmdbToOther)
hmdbToOther <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfKegg)){
cid2 <- grep('RAMP_C',listOfKegg[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfWiki)){
cid2 <- grep('RAMP_C',listOfWiki[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfReac)){
cid2 <- grep('RAMP_C',listOfReac[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
}
library(RNetLogo)
path <- "C:/Users/81963/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/NetLogo 6.0.2/app"
NLStart(path)
path <- "C:\\Users\\81963\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\NetLogo 6.0.2\\app"
NLStart(path)
path <- "C:\/Users\/81963\/AppData\/Roaming\/Microsoft\/Windows\/Start Menu\/Programs\/NetLogo 6.0.2\/app"
load("~/RProject/matheLab/paperBarPlot/pathwaysInEachMetabolites.RData")
View(resultHMDB)
nrow(resultHMDB[resultHMDB$totpathways == 1,])
nrow(resultKEGG[resultKEGG$totpathways == 1,])
nrow(resultWIKI[resultWIKI$totpathways == 1,])
nrow(resultREAC[resultREAC$totpathways == 1,])
View(resultREAC)
oneHmdb <- resultHMDB[resultHMDB$totpathways == 1,]
oneReac <- resultREAC[resultREAC$totpathways == 1,]
oneHmdb <- resultHMDB[resultHMDB$totpathways == 1,]
oneKegg <- resultKEGG[resultKEGG$totpathways == 1,]
oneWiki <- resultWIKI[resultWIKI$totpathways == 1,]
oneReac <- resultREAC[resultREAC$totpathways == 1,]
together <- Reduce(union,oneHmdb$metabolites,oneKegg$metabolites,oneWiki$metabolites,
oneReac$metabolites)
together <- c(oneHmdb$metabolites,oneKegg$metabolites,oneWiki$metabolites,
oneReac$metabolites)
View(oneHmdb)
View(oneHmdb)
together <- c(as.character(oneHmdb$metabolites),
as.character(oneKegg$metabolites),
as.character(oneWiki$metabolites),
as.character(oneReac$metabolites))
unique(together)
together <- unique(together)
?RaMP::runRaMPapp()
system("mysql -u root -p Ehe131224")
t1 <- try(system("who", intern = TRUE))
t1 <- try(system("ls", intern = TRUE))
t2 <- try(system("mysql -u root -p Ehe131224"))
devtools::check()
setwd("~/RProject/Package/RaMP")
devtools::check()
load("~/RProject/matheLab/paper/heatmapData/overlap_data.RData")
setwd("~/RProject/matheLab/paper/heatmapData")
dim(gene_result)
dim(metabolite_result)
for(pathid in pathwayInWiki$pathwayRampId){
print(pathid)
path <- pathwayInWiki[pathwayInWiki$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfWikiC[[pid]] <- cid
}
if(length(gid) >n){
listOfWikiG[[pid]] <- gid
}
}
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
for(pathid in pathwayInWiki$pathwayRampId){
print(pathid)
path <- pathwayInWiki[pathwayInWiki$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfWikiC[[pid]] <- cid
}
if(length(gid) >n){
listOfWikiG[[pid]] <- gid
}
}
pid <- pathwayInWiki$pathwayRampId
RaMP::runRaMPapp()
RaMP::runRaMPapp("mathelabramp","Ehe131224")
RaMP::runRaMPapp("mathelabramp",password = "Ehe131224")
library(highcharter)
RaMP::runRaMPapp("mathelabramp",password = "Ehe131224")
pid <- pathwayInWiki$pathwayRampId
length(pid)
info <- sapply(pid,shQuote)
info <- paste(info,collapse = ",")
query <- paste("select * from analytehaspathway where pathwayRampId in (",info,");")
query <- paste("select * from analytehaspathway where pathwayRampId in (",info,");")
df <- dbGetQuery(con,query)
View(df)
for(pathid in pathwayInWiki$pathwayRampId){
print(pathid)
path <- pathwayInWiki[pathwayInWiki$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
print(cid)
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
print(gid)
Sys.sleep(0.5)
if(length(cid) >n){
listOfWikiC[[pid]] <- cid
}
if(length(gid) >n){
listOfWikiG[[pid]] <- gid
}
}
listOfReacC <- list()
listOfWikiC <- list()
listOfWikiG <- list()
listOfReacG <- list()
pid <- pathwayInWiki$pathwayRampId
for(pathid in pathwayInWiki$pathwayRampId){
print(pathid)
path <- pathwayInWiki[pathwayInWiki$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
print(cid)
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
print(gid)
Sys.sleep(0.5)
if(length(cid) >n){
listOfWikiC[[pid]] <- cid
}
if(length(gid) >n){
listOfWikiG[[pid]] <- gid
}
}
library(RMySQL)
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ehe131224',
host = 'localhost')
pathways<- dbGetQuery(con,'select * from pathway;')
dbname <- unique(pathways$type)
pathwayInHmdb <- pathways[pathways$type == 'hmdb',]
pathwayInKegg <- pathways[pathways$type == 'kegg',]
pathwayInWiki <- pathways[pathways$type == 'wiki',]
pathwayInReac <- pathways[pathways$type == 'reactome',]
listOfHmdbC <- list()
listOfKeggC <- list()
listOfReacC <- list()
listOfWikiC <- list()
listOfHmdbG <- list()
listOfKeggG <- list()
listOfWikiG <- list()
listOfReacG <- list()
n <- 10
for(pathid in pathwayInHmdb$pathwayRampId){
print(pathid)
pid <- pathid
path <- pathwayInHmdb[pathwayInHmdb$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfHmdbC[[pid]] <- cid
}
if(length(gid) >n){
listOfHmdbG[[pid]] <- gid
}
}
listOfHmdbC <- list()
listOfKeggC <- list()
listOfWikiC <- list()
listOfReacC <- list()
listOfHmdbG <- list()
listOfKeggG <- list()
listOfWikiG <- list()
listOfReacG <- list()
n <- 10
for(pathid in pathwayInHmdb$pathwayRampId){
print(pathid)
pid <- pathid
path <- pathwayInHmdb[pathwayInHmdb$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfHmdbC[[pid]] <- cid
}
if(length(gid) >n){
listOfHmdbG[[pid]] <- gid
}
}
for(pathid in pathwayInKegg$pathwayRampId){
print(pathid)
pid <- pathid
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) > n){
listOfKeggC[[pid]] <- cid
}
if(length(gid) > n){
listOfKeggG[[pid]] <- gid
}
}
for(pathid in pathwayInWiki$pathwayRampId){
print(pathid)
pid <- pathid
path <- pathwayInWiki[pathwayInWiki$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
print(cid)
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
print(gid)
#
if(length(cid) >n){
listOfWikiC[[pid]] <- cid
}
if(length(gid) >n){
listOfWikiG[[pid]] <- gid
}
}
for(pathid in pathwayInReac$pathwayRampId){
print(pathid)
pid <- pathid
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfReacC[[pid]] <- cid
}
if(length(gid) >n){
listOfReacG[[pid]] <- gid
}
}
pathwayid <- c(names(listOfHmdbC),
names(listOfKeggC),
names(listOfWikiC),
names(listOfReacC))
metabolite_result <- matrix(NA,nrow = length(pathwayid),ncol = length(pathwayid))
colnames(metabolite_result) <- pathwayid
rownames(metabolite_result) <- pathwayid
pathToanalC <- do.call(c,list(listOfHmdbC,listOfKeggC,
listOfWikiC,listOfReacC))
for(i in 1:length(pathwayid)){
id <- pathwayid[i]
cid <- pathToanalC[[i]]
for (j in 1:length(pathwayid)) {
if(is.na(metabolite_result[i,j])){
if(i==j){
metabolite_result[i,j] <- 1
}else{
cid2 <- pathToanalC[[j]]
shared_metabolite <- intersect(cid,cid2)
total <- union(cid,cid2)
metabolite_result[i,j] <- length(shared_metabolite)/length(total)
print(metabolite_result[i,j])
if(is.na(metabolite_result[j,i])){
metabolite_result[j,i] <- metabolite_result[i,j]
}
}
}
print(paste("Compute for ",i,",",j))
}
}
pathwayidG <- c(names(listOfHmdbG),
names(listOfKeggG),
names(listOfWikiG),
names(listOfReacG))
gene_result <- matrix(NA,nrow = length(pathwayidG),ncol = length(pathwayidG))
colnames(gene_result) <- pathwayidG
rownames(gene_result) <- pathwayidG
pathToanalG <- do.call(c,list(listOfHmdbG,listOfKeggG,
listOfWikiG,listOfReacG))
for(i in 1:length(pathwayidG)){
id <- pathwayidG[i]
cid <- pathToanalG[[i]]
for (j in 1:length(pathwayidG)) {
if(is.na(gene_result[i,j])){
if(i==j){
gene_result[i,j] <- 1
}else{
cid2 <- pathToanalG[[j]]
shared_metabolite <- intersect(cid,cid2)
total <- union(cid,cid2)
gene_result[i,j] <- length(shared_metabolite)/length(total)
print(gene_result[i,j])
if(is.na(gene_result[j,i])){
gene_result[j,i] <- gene_result[i,j]
}
}
}
print(paste("Compute for ",i,",",j))
}
}
path1 <- pathways[pathways$pathwayRampId %in% colnames(metabolite_result),]
View(path1)
dim(metabolite_result)
colnames(metabolite_result) <- path1$sourceId
row.names(metabolite_result) <- path1$sourceId
View(metabolite_result)
setwd("~/RProject/matheLab/paper/heatmapData")
save.image(file = "overlap_data.RData")
save(metabolite_result,"metabolite_overlap_matrix.RData")
save(file =  "metabolite_overlap_matrix.RData", metabolite_result)
save(file =  "gene_overlap_matrix.RData", gene_result)
save(file =  "RaMP_Pathways_Table.RData", pathways)
