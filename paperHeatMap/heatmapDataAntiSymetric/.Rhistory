rampid2 <- listOfHmdb[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
#Sys.sleep(1)
}
}
if(5 %in% range(1,6)){
print('hello')
}
5 %in% range(1,6)
5 %in%
range(1,6)
range(1,6)
5 %in% 1:6
7 %in% 1:6
1 %in% 1:6
6 %in% 1:6
5 %in% (717+1):(717+6)
717 %in% (717+1):(717+6)
719 %in% (717+1):(717+6)
for(i in 1:3420){
pid1 <- unname(colnames(result)[i])
for(j in 1:3420){
pid2 <- unname(colnames(result)[j])
if(i < length(listOfHmdb) + 1 &j <length(listOfHmdb)+1){
rampid1 <- listOfHmdb[[shQuote(pid1)]]
rampid2 <- listOfHmdb[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
# kegg
if(i < length(listOfHmdb) + 1 &j %in% (717+1):(717+192)){
rampid1 <- listOfKegg[[shQuote(pid1)]]
rampid2 <- listOfKegg[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
# wiki
if(i < length(listOfHmdb) + 1 &j %in% (717+192+1):(717+192 +379)){
rampid1 <- listOfWiki[[shQuote(pid1)]]
rampid2 <- listOfWiki[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
# reactome
if(i < length(listOfHmdb) + 1 & j %in% (717+192+379+1):(717+192+379+2132)){
rampid1 <- listOfReac[[shQuote(pid1)]]
rampid2 <- listOfReac[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
#Sys.sleep(1)
}
}
for(i in 1:3420){
pid1 <- unname(colnames(result)[i])
for(j in 1:3420){
print(paste0(i,',',j))
pid2 <- unname(colnames(result)[j])
if(i < length(listOfHmdb) + 1 &j <length(listOfHmdb)+1){
rampid1 <- listOfHmdb[[shQuote(pid1)]]
rampid2 <- listOfHmdb[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
#print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
# kegg
if(i < length(listOfHmdb) + 1 & j %in% (717+1):(717+192)){
rampid1 <- listOfKegg[[shQuote(pid1)]]
rampid2 <- listOfKegg[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
#print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
# wiki
if(i < length(listOfHmdb) + 1 &j %in% (717+192+1):(717+192 +379)){
rampid1 <- listOfWiki[[shQuote(pid1)]]
rampid2 <- listOfWiki[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
#print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
# reactome
if(i < length(listOfHmdb) + 1 & j %in% (717+192+379+1):(717+192+379+2132)){
rampid1 <- listOfReac[[shQuote(pid1)]]
rampid2 <- listOfReac[[shQuote(pid2)]]
#print(rampid1)
#print(rampid2)
if(length(grep("RAMP_C",rampid1,value = T))>0 &
length(grep("RAMP_C",rampid2,value = T))>0){
#print(paste0(i,',',j))
a <-grep("RAMP_C",rampid1,value = T)
b <-grep("RAMP_C",rampid2,value = T)
overlap <- length(intersect(a,b))
result[i,j] <- overlap
}
}
#Sys.sleep(1)
}
}
5==5
5==5 & 719 %in% (717+1):(717+6)
5>5 & 719 %in% (717+1):(717+6)
for(rampid in listOfHmdb){
print(rampid)
Sys.sleep(3)
}
hmdbTohmdb <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2)))
hmdbTohmdb <- rbind(hmdbTohmdb,df)
}
}
}
hmdbTohmdb <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2)))
hmdbTohmdb <- rbind(hmdbTohmdb,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbTohmdb <- rbind(hmdbTohmdb,df)
}
}
}
View(hmdbTohmdb)
hmdbTohmdb <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2)))
hmdbTohmdb <- rbind(hmdbTohmdb,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbTohmdb <- rbind(hmdbTohmdb,df)
}
}
}
hmdbTohmdb <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbTohmdb <- rbind(hmdbTohmdb,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbTohmdb <- rbind(hmdbTohmdb,df)
}
}
}
hmdbToOther <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfKegg)){
cid2 <- grep('RAMP_C',listOfKegg[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfWiki)){
cid2 <- grep('RAMP_C',listOfWiki[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfReac)){
cid2 <- grep('RAMP_C',listOfReac[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
}
View(hmdbToOther)
hmdbToOther <- data.frame()
for(pid1 in names(listOfHmdb)){
cid1 <- grep('RAMP_C',listOfHmdb[[pid1]],value = T)
for(pid2 in names(listOfHmdb)){
cid2 <- grep('RAMP_C',listOfHmdb[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfKegg)){
cid2 <- grep('RAMP_C',listOfKegg[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfWiki)){
cid2 <- grep('RAMP_C',listOfWiki[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
for(pid2 in names(listOfReac)){
cid2 <- grep('RAMP_C',listOfReac[[pid2]],value = T)
print(paste0(pid1,':',pid2))
if(length(cid1) >0 & length(cid2) >0){
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = length(intersect(cid1,cid2))/length(union(cid1,cid2)))
hmdbToOther <- rbind(hmdbToOther,df)
} else{
df <- data.frame(pathway1=pid1,
pathway2 = pid2,
overlap = 0)
hmdbToOther <- rbind(hmdbToOther,df)
}
}
}
library(RNetLogo)
path <- "C:/Users/81963/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/NetLogo 6.0.2/app"
NLStart(path)
path <- "C:\\Users\\81963\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\NetLogo 6.0.2\\app"
NLStart(path)
path <- "C:\/Users\/81963\/AppData\/Roaming\/Microsoft\/Windows\/Start Menu\/Programs\/NetLogo 6.0.2\/app"
load("~/RProject/matheLab/paperBarPlot/pathwaysInEachMetabolites.RData")
View(resultHMDB)
nrow(resultHMDB[resultHMDB$totpathways == 1,])
nrow(resultKEGG[resultKEGG$totpathways == 1,])
nrow(resultWIKI[resultWIKI$totpathways == 1,])
nrow(resultREAC[resultREAC$totpathways == 1,])
View(resultREAC)
oneHmdb <- resultHMDB[resultHMDB$totpathways == 1,]
oneReac <- resultREAC[resultREAC$totpathways == 1,]
oneHmdb <- resultHMDB[resultHMDB$totpathways == 1,]
oneKegg <- resultKEGG[resultKEGG$totpathways == 1,]
oneWiki <- resultWIKI[resultWIKI$totpathways == 1,]
oneReac <- resultREAC[resultREAC$totpathways == 1,]
together <- Reduce(union,oneHmdb$metabolites,oneKegg$metabolites,oneWiki$metabolites,
oneReac$metabolites)
together <- c(oneHmdb$metabolites,oneKegg$metabolites,oneWiki$metabolites,
oneReac$metabolites)
View(oneHmdb)
View(oneHmdb)
together <- c(as.character(oneHmdb$metabolites),
as.character(oneKegg$metabolites),
as.character(oneWiki$metabolites),
as.character(oneReac$metabolites))
unique(together)
together <- unique(together)
?RaMP::runRaMPapp()
system("mysql -u root -p Ehe131224")
t1 <- try(system("who", intern = TRUE))
t1 <- try(system("ls", intern = TRUE))
t2 <- try(system("mysql -u root -p Ehe131224"))
setwd("~/RProject/Package/RaMP/R")
devtools::install()
devtools::install()
RaMP::runRaMPapp(dbname = "mathelabramp",username = "root",password = "Ehe131224")
library(highcharter)
devtools::install()
RaMP::runRaMPapp(dbname = "mathelabramp",username = "root",password = "Ehe131224")
metabolite_result2 <- matrix(NA,nrow = length(pathwayid),ncol = length(pathwayid))
load("~/RProject/matheLab/paperHeatMap/heatmapDataSymetric/overlap_data.RData")
metabolite_result2 <- matrix(NA,nrow = length(pathwayid),ncol = length(pathwayid))
for(i in 1:length(pathwayid)){
id <- pathwayid[i]
cid <- pathToanalC[[i]]
for (j in 1:length(pathwayid)) {
if(is.na(metabolite_result2[i,j])){
if(i==j){
metabolite_result2[i,j] <- 1
}else{
cid2 <- pathToanalC[[j]]
shared_metabolite <- unique(intersect(cid,cid2))
total <- union(cid,cid2)
metabolite_result2[i,j] <- length(shared_metabolite)/length(unique(cid2))
print(metabolite_result2[i,j])
if(is.na(metabolite_result2[j,i])){
metabolite_result2[j,i] <- length(shared_metabolite)/length(unique(cid))
}
}
}
print(paste("Compute for ",i,",",j))
}
}
metabolite_result2 <- matrix(NA,nrow = length(pathwayid),ncol = length(pathwayid))
for(i in 1:length(pathwayid)){
id <- pathwayid[i]
cid <- pathToanalC[[i]]
for (j in 1:length(pathwayid)) {
if(is.na(metabolite_result2[i,j])){
if(i==j){
metabolite_result2[i,j] <- 1
}else{
cid2 <- pathToanalC[[j]]
shared_metabolite <- unique(intersect(cid,cid2))
total <- union(cid,cid2)
metabolite_result2[i,j] <- length(shared_metabolite)/length(unique(cid2))
print(metabolite_result2[i,j])
if(is.na(metabolite_result2[j,i])){
metabolite_result2[j,i] <- length(shared_metabolite)/length(unique(cid))
}
}
}
print(paste("Compute for ",i,",",j))
}
}
gene_result2 <- matrix(NA,nrow = length(pathwayidG),ncol = length(pathwayidG))
for(i in 1:length(pathwayidG)){
id <- pathwayidG[i]
cid <- pathToanalG[[i]]
for (j in 1:length(pathwayidG)) {
if(is.na(gene_result2[i,j])){
if(i==j){
gene_result2[i,j] <- 1
}else{
cid2 <- pathToanalG[[j]]
shared_metabolite <- unique(intersect(cid,cid2))
total <- union(cid,cid2)
gene_result2[i,j] <- length(shared_metabolite)/length(cid2)
print(gene_result[i,j])
if(is.na(gene_result2[j,i])){
gene_result2[j,i] <- length(shared_metabolite) / length(cid)
}
}
}
print(paste("Compute for ",i,",",j))
}
}
dim(gene_result)
dim(gene_result2)
View(gene_result)
View(gene_result2)
View(metabolite_result2)
colnames(gene_result2) <- pathwayidG
rownames(gene_result2) <- pathwayidG
colnames(metabolite_result2) <- pathwayid
rownames(metabolite_result2) <- pathwayid
View(gene_result2)
colnames(metabolite_result2) <- path1$sourceId
row.names(metabolite_result2) <- path1$sourceId
colnames(gene_result2) <- genes_path
row.names(gene_result2) <- genes_path
colnames(metabolite_result) <- path1$sourceId
row.names(metabolite_result) <- path1$sourceId
colnames(gene_result) <- genes_path
row.names(gene_result) <- genes_path
path1 <- pathways[pathways$pathwayRampId %in% colnames(metabolite_result),]
metabolites_path <- pathways$sourceId[pathways$pathwayRampId %in% colnames(metabolite_result)]
genes_path <- pathways$sourceId[pathways$pathwayRampId %in% colnames(gene_result)]
colnames(metabolite_result) <- path1$sourceId
row.names(metabolite_result) <- path1$sourceId
colnames(gene_result) <- genes_path
row.names(gene_result) <- genes_path
colnames(metabolite_result2) <- path1$sourceId
row.names(metabolite_result2) <- path1$sourceId
colnames(gene_result2) <- genes_path
row.names(gene_result2) <- genes_path
View(gene_result2)
setwd("~/RProject/matheLab/paperHeatMap/heatmapDataAntiSymetric")
save.image(file = "Method2_overlap_data.RData")
