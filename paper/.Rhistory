print(pathid)
path <- pathwayInHmdb[pathwayInHmdb$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfHmdbC[[pathid]] <- cid
}
if(length(gid) >n){
listOfHmdbG[[pathid]] <- gid
}
}
# Find kegg
for(pathid in pathwayInKegg$pathwayRampId){
print(pathid)
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfKeggC[[pathid]] <- cid
}
if(length(gid) >n){
listOfKeggG[[pathid]] <- gid
}
}
# Find wiki
for(pathid in pathwayInWiki$pathwayRampId){
print(pathid)
path <- pathwayInWiki[pathwayInWiki$pathwayRampId == pathid,]$pathwayName
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfWikiC[[pathid]] <- cid
}
if(length(gid) >n){
listOfWikiG[[pathid]] <- gid
}
}
# Find reactome
for(pathid in pathwayInReac$pathwayRampId){
print(pathid)
pathid <- shQuote(pathid)
query <- paste0("select * from analytehaspathway where pathwayRampId =",
pathid,
";")
df <- dbGetQuery(con,query)
cid <- df$rampId[grepl("RAMP_C_",df$rampId)]
gid <- df$rampId[grepl("RAMP_G_",df$rampId)]
if(length(cid) >n){
listOfReacC[[pathid]] <- cid
}
if(length(gid) >n){
listOfReacG[[pathid]] <- gid
}
}
View(listOfReacG)
# Output to a matrix
# In order of HMDB Kegg Wiki Reac
pathwayid <- c(names(listOfHmdbC),
names(listOfKeggC),
names(listOfReacC),
names(listOfWikiC))
metabolite_result <- matrix(NA,nrow = length(pathwayid),ncol = length(pathwayid))
# Assign names on the metabolites result
colnames(metabolite_result) <- pathwayid
rownames(metabolite_result) <- pathwayid
pathToanalC <- do.call(c,list(listOfHmdbC,listOfKeggC,
listOfWikiC,listOfReacC))
for(i in 1:length(pathwayid)){
id <- pathwayid[i]
cid <- pathToanalC[[i]]
for (j in 1:length(pathwayid)) {
if(is.na(metabolite_result[i,j])){
if(i==j){
metabolite_result[i,j] <- 1
}else{
cid2 <- pathToanalC[[j]]
shared_metabolite <- intersect(cid,cid2)
total <- union(cid,cid2)
metabolite_result[i,j] <- length(shared_metabolite)/length(total)
print(metabolite_result[i,j])
if(is.na(metabolite_result[j,i])){
metabolite_result[j,i] <- metabolite_result[i,j]
}
}
}
print(paste("Compute for ",i,",",j))
}
}
library(plotly)
p_metabolites <- plot_ly(z = metabolite_result,type = "heatmap")
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap")
p_metabolites
# Output to a matrix
pathwayidG <- c(names(listOfHmdbG),
names(listOfKeggG),
names(listOfReacG),
names(listOfWikiG))
gene_result <- matrix(NA,nrow = length(pathwayidG),ncol = length(pathwayidG))
# In order of HMDB Kegg Wiki Reac
# Assign names on the metabolites result
colnames(gene_result) <- pathwayidG
rownames(gene_result) <- pathwayidG
pathToanalG <- do.call(c,list(listOfHmdbG,listOfKeggG,
listOfWikiG,listOfReacG))
for(i in 1:length(pathwayid)){
id <- pathwayidG[i]
cid <- pathToanalG[[i]]
for (j in 1:length(pathwayidG)) {
if(is.na(gene_result[i,j])){
if(i==j){
gene_result[i,j] <- 1
}else{
cid2 <- pathToanalG[[j]]
shared_metabolite <- intersect(cid,cid2)
total <- union(cid,cid2)
gene_result[i,j] <- length(shared_metabolite)/length(total)
print(gene_result[i,j])
if(is.na(gene_result[j,i])){
gene_result[j,i] <- gene_result[i,j]
}
}
}
print(paste("Compute for ",i,",",j))
}
}
p_genes <- plot_ly(z = gene_result,
x = pathwayid,
y = pathwayid,
type = "heatmap")
p_genes
View(gene_result)
for(i in 1:length(pathwayidG)){
id <- pathwayidG[i]
cid <- pathToanalG[[i]]
for (j in 1:length(pathwayidG)) {
if(is.na(gene_result[i,j])){
if(i==j){
gene_result[i,j] <- 1
}else{
cid2 <- pathToanalG[[j]]
shared_metabolite <- intersect(cid,cid2)
total <- union(cid,cid2)
gene_result[i,j] <- length(shared_metabolite)/length(total)
print(gene_result[i,j])
if(is.na(gene_result[j,i])){
gene_result[j,i] <- gene_result[i,j]
}
}
}
print(paste("Compute for ",i,",",j))
}
}
p_genes <- plot_ly(z = gene_result,
x = pathwayid,
y = pathwayid,
type = "heatmap")
p_genes
p_genes <- plot_ly(z = gene_result,
x = pathwayidG,
y = pathwayidG,
type = "heatmap")
p_genes
library(RMySQL)
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ramp340!',
host = 'localhost')
ramp_analyte <- dbGetQuery(con,"select * from analyte;")
cid <- unique(ramp_analyte$rampId)
meta_path <- data.frame(cid = NULL,numOfPath = NULL)
gene_path <- data.frame(gid = NULL,numOfPath = NULL)
for (each in cid) {
print(each)
each2 <- shQuote(each)
query <- paste0("select * from analytehaspathway where rampId = ",each2,";")
pathway <- dbGetQuery(con,query)
paths <- unique(pathway$pathwayRampId)
meta_path <- rbind(meta_path,data.frame(cid = each,numOfPath = length(paths)))
}
ramp_analyte <- dbGetQuery(con,"select distinct(*) from analytehaspathway;")
dbClearResult(dbListResults(con)[[1]])
dbListResults(con)
con <- dbConnect(MySQL(),
user = 'root',
dbname='mathelabramp',
password = 'Ramp340!',
host = 'localhost')
ramp_analyte <- dbGetQuery(con,"select distinct(*) from analytehaspathway;")
ramp_analyte <- dbGetQuery(con,"select * from analytehaspathway;")
cid <- unique(ramp_analyte$rampId)
rampId  <- unique(ramp_analyte$rampId)
cid <- rampId[grepl("RAMP_C_",cid)]
rampId <- unique(ramp_analyte$rampId)
cid <- rampId[grepl("RAMP_C_",rampId)]
gid <- rampId[grepl("RAMP_G_",rampId)]
meta_path <- data.frame(cid = NULL,numOfPath = NULL)
gene_path <- data.frame(gid = NULL,numOfPath = NULL)
meta_path <- data.frame(cid = NULL,numOfPath = NULL)
gene_path <- data.frame(gid = NULL,numOfPath = NULL)
for (each in cid) {
print(each)
each2 <- shQuote(each)
query <- paste0("select * from analytehaspathway where rampId = ",each2,";")
pathway <- dbGetQuery(con,query)
paths <- unique(pathway$pathwayRampId)
meta_path <- rbind(meta_path,data.frame(cid = each,numOfPath = length(paths)))
}
for (each in gid) {
print(each)
each2 <- shQuote(each)
query <- paste0("select * from analytehaspathway where rampId = ",each2,";")
pathway <- dbGetQuery(con,query)
paths <- unique(pathway$pathwayRampId)
gene_path <- rbind(gene_path,data.frame(gid = each,numOfPath = length(paths)))
}
View(gene_path)
max(meta_path$numOfPath)
min(meta_path$numOfPath)
max(gene_path$numOfPath)
min(gene_path$numOfPath)
# Making plot for metabolites:
nrow(meta_path[meta_path$numOfPath<20,])
nrow(meta_path[meta_path$numOfPath>=20 & meta_path$numOfPath<40,])
nrow(meta_path[meta_path$numOfPath>=40 & meta_path$numOfPath<60,])
nrow(meta_path[meta_path$numOfPath>=60 & meta_path$numOfPath<80,])
# Making plot for metabolites:
nrow(meta_path[meta_path$numOfPath<5,])
nrow(meta_path[meta_path$numOfPath>=5 & meta_path$numOfPath<10,])
nrow(meta_path[meta_path$numOfPath>=10 & meta_path$numOfPath<15,])
nrow(meta_path[meta_path$numOfPath>=15 & meta_path$numOfPath<20,])
ramp_analyte <- dbGetQuery(con,"select * from analytehaspathway where rampId in (select rampId from analyte where type = 'hmdb');")
View(ramp_analyte)
dim(gene_result)
dim(metabolite_result)
setwd("~/Documents/Rproject/mathelab/mathelab/paper")
save.image(file = "metabolites_gene_overlap.RData")
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 10,
r = 10,
t = 10,
b = 10))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 100,
r = 100,
t = 100,
b = 100))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 100,
r = 100,
t = 100,
b = 100),
xaxis = list(
type = "category",
showline = TRUE,
autorange = TRUE
),
yaxis = list(
type = "category",
showline = TRUE,
autorange = TRUE
))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 100,
r = 100,
t = 100,
b = 100),
xaxis = list(
type = "category",
showline = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
showline = FALSE,
autorange = TRUE
))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 100,
r = 100,
t = 100,
b = 100),
xaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels =FALSE,
autorange = TRUE
))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 100,
r = 100,
t = 100,
b = 100),
xaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels =FALSE,
autorange = TRUE
),
shapes = list(
list(
line = list(
color = "rgba(68,68,68,0.5)",
width = 1
)
)))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 10,
r = 10,
t = 10,
b = 10),
xaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels =FALSE,
autorange = TRUE
),
shapes = list(
list(
line = list(
color = "rgba(68,68,68,0.5)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2
)))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 10,
r = 10,
t = 10,
b = 10),
xaxis = list(
type = "category",
autoticks = FALSE,
showline = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels =FALSE,
autorange = TRUE
),
shapes = list(
list(
line = list(
color = "rgba(68,68,68,0.5)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2
)))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 10,
r = 10,
t = 10,
b = 10),
xaxis = list(
type = "category",
autoticks = FALSE,
ticks = "inside",
showline = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
showline = FALSE,
zeroline = FALSE,
showticklabels =FALSE,
autorange = TRUE
),
shapes = list(
list(
line = list(
color = "rgba(68,68,68,0.5)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2
)))
p_metabolites
p_metabolites <- plot_ly(z = metabolite_result,
x = pathwayid,
y = pathwayid,
type = "heatmap") %>%
layout(title = "metabolites overlap",
margin = list(l = 10,
r = 10,
t = 10,
b = 10),
xaxis = list(
type = "category",
autoticks = FALSE,
ticks = "inside",
showline = FALSE,
zeroline = FALSE,
showticklabels = FALSE,
autorange = TRUE
),
yaxis = list(
type = "category",
ticks = "inside",
showline = FALSE,
zeroline = FALSE,
showticklabels =FALSE,
autorange = TRUE
),
shapes = list(
list(
line = list(
color = "rgba(68,68,68,0.5)",
width = 1
),
type = "line",
x0 = -0.3,
x1 = 1.2
)))
p_metabolites
